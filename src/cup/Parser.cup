/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal PUBLIC                             ;                                                                                                                                                                                        
terminal CLASS                              ;                                                                                                                                                                                        
terminal STATIC                             ;                                                                                                                                                                                        
terminal VOID                               ;                                                                                                                                                                                        
terminal MAIN                               ;                                                                                                                                                                                        
terminal OPEN_BRACKETS                      ;                                                                                                                                                                                                
terminal CLOSE_BRACKETS                     ;                                                                                                                                                                                                
terminal OPEN_CURLY_BRACKETS                ;                                                                                                                                                                                                        
terminal CLOSE_CURLY_BRACKETS               ;                                                                                                                                                                                                        
terminal OPEN_SQUARE_BRACKETS               ;                                                                                                                                                                                                        
terminal CLOSE_SQUARE_BRACKETS              ;                                                                                                                                                                                                                                                                                                                                                                                                                                 
terminal STRING                             ;                                                                                                                                                                                            
terminal EXTENDS                            ;                                                                                                                                                                                                
terminal SEMICOLON                          ;                                                                                                                                                                                                
terminal COMMA                              ;                                                                                                                                                                                            
terminal RETURN                             ;                                                                                                                                                                                            
terminal INT                                ;                                                                                                                                                                                            
terminal BOOLEAN                            ;                                                                                                                                                                                                
terminal IF                                 ;                                                                                                                                                                                        
terminal ELSE                               ;                                                                                                                                                                                            
terminal WHILE                              ;                                                                                                                                                                                            
terminal PRINT                              ;                                                                                                                                                                                            
terminal EQUAL                              ;                                                                                                                                                                                            
terminal AND                                ;                                                                                                                                                                                            
terminal LT                                 ;                                                                                                                                                                                        
terminal PLUS                               ;                                                                                                                                                                                            
terminal MINUS                              ;                                                                                                                                                                                            
terminal MULT                               ;                                                                                                                                                                                            
terminal DOT                                ;                                                                                                                                                                                            
terminal LENGTH                             ;                                                                                                                                                                                            
terminal TRUE                               ;                                                                                                                                                                                            
terminal FALSE                              ;                                                                                                                                                                                            
terminal THIS                               ;                                                                                                                                                                                            
terminal NEW                                ;                                                                                                                                                                                            
terminal NOT                                ;                                                                                                                                                                                            
terminal Integer NUMBER                     ;                                                                                                                                                                                            
terminal String IDENTIFIER                  ;                 


/*****************/
/* NON TERMINALS */
/*****************/
non terminal    Program                 prog                     ;
non terminal    MainClass               main_class               ;                                               
non terminal    ClassDecl               class_decl               ;                                           
non terminal    FormalArg               formal_arg               ;
non terminal    VarDecl                 var_decl                 ;
non terminal    MethodDecl              method_decl              ;                                           
non terminal    Statement               statement                ;
non terminal    AstType                 type                     ;
non terminal    Expr                    expr                     ;                                               

non terminal    LinkedList<ClassDecl>   class_decl_list          ;                                           
non terminal    LinkedList<MethodDecl>  methods_decl_list        ;
non terminal    LinkedList<VarDecl>     vars_decl_list           ;
non terminal    LinkedList<Statement>   statements_list          ;                                                                                         
non terminal    LinkedList<Expr>        expr_list                ;                                             
non terminal    LinkedList<Expr>        cont_expr_list                ;                                             
non terminal    LinkedList<FormalArg>   formal_arguments_list    ;
non terminal    LinkedList<FormalArg>   cont_formal_arguments_list    ;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc EQUAL;
precedence nonassoc AND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left MULT;
precedence right NOT, NEW;
precedence left DOT;
precedence left OPEN_BRACKETS, CLOSE_BRACKETS, OPEN_CURLY_BRACKETS, CLOSE_CURLY_BRACKETS, OPEN_SQUARE_BRACKETS, CLOSE_SQUARE_BRACKETS;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog                        ::=     main_class:mc  class_decl_list:cdl {:RESULT = new Program(mc, cdl);:}
                                    ;



/********************/
/* LISTS of stuff   */
/********************/
class_decl_list             ::=     class_decl_list:l class_decl:ecd  {:l.addFirst(ecd); RESULT = l;:}
                                    | {:RESULT = new LinkedList<ClassDecl>();:}
                                    ;

methods_decl_list           ::=     method_decl:em methods_decl_list:l   {:l.addFirst(em); RESULT = l;:}
                                    | {:RESULT = new LinkedList<MethodDecl>();:}
                                    ;

vars_decl_list              ::=     vars_decl_list:l var_decl:ev  {:l.add(ev); RESULT = l;:}
                                    | {:RESULT = new LinkedList<VarDecl>();:}
                                    ;

statements_list             ::=     statement:es statements_list:l {:l.addFirst(es); RESULT = l;:}
                                    | {:RESULT = new LinkedList<Statement>();:}
                                    ;

expr_list                   ::=     expr:ee cont_expr_list:l {:l.addFirst(ee); RESULT = l;:}
                                    | {:RESULT = new LinkedList<Expr>();:}
                                    ;
cont_expr_list              ::=     COMMA expr:ee cont_expr_list:l {:l.addFirst(ee); RESULT = l;:}
                                    | {:RESULT = new LinkedList<Expr>();:}
                                    ;

formal_arguments_list       ::=     formal_arg:ef cont_formal_arguments_list:l {:l.addFirst(ef); RESULT = l;:}
                                    | {:RESULT = new LinkedList<FormalArg>();:}
                                    ;

cont_formal_arguments_list  ::=     COMMA formal_arg:ef cont_formal_arguments_list:l {:l.addFirst(ef); RESULT = l;:}
                                    | {:RESULT = new LinkedList<FormalArg>();:}
                                    ;

/********************/
/* CLASSES          */
/********************/

class_decl              ::= CLASS IDENTIFIER:cn
                            OPEN_CURLY_BRACKETS
                            vars_decl_list:fields
                            methods_decl_list:methods
                            CLOSE_CURLY_BRACKETS
                            {:RESULT = new ClassDecl(cn, null, fields, methods);:}

                            | CLASS IDENTIFIER:cn EXTENDS IDENTIFIER:sn
                              OPEN_CURLY_BRACKETS 
                              vars_decl_list:fields
                              methods_decl_list:methods
                              CLOSE_CURLY_BRACKETS
                              {:RESULT = new ClassDecl(cn, sn, fields, methods);:}
                            ;

main_class              ::= CLASS IDENTIFIER:cn 
                            OPEN_CURLY_BRACKETS
                            PUBLIC STATIC VOID MAIN OPEN_BRACKETS STRING OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS IDENTIFIER:arg_name CLOSE_BRACKETS
                            OPEN_CURLY_BRACKETS
                            statement:the_main_statment
                            CLOSE_CURLY_BRACKETS
                            CLOSE_CURLY_BRACKETS
                            {:RESULT = new MainClass(cn, arg_name, the_main_statment);:}
                            ;


/********************/
/* METHODS          */
/********************/
var_decl                ::= type:t IDENTIFIER:name SEMICOLON {:RESULT = new VarDecl(t, name, lexer.getLine());:} // TODO: remove lexer line
                            ;

/********************/
/* VARIABLES        */
/********************/

method_decl             ::= PUBLIC type:t IDENTIFIER:name OPEN_BRACKETS formal_arguments_list:fal CLOSE_BRACKETS OPEN_CURLY_BRACKETS vars_decl_list:vdl statements_list:sl RETURN expr:r SEMICOLON CLOSE_CURLY_BRACKETS
                            {:RESULT = new MethodDecl(t, name, fal, vdl, sl, r, lexer.getLine());:} // TODO: ...
                            ;
/********************/
/* STATEMENTS       */
/********************/
statement               ::= PRINT OPEN_BRACKETS expr:e CLOSE_BRACKETS SEMICOLON {:RESULT = new SysoutStatement(e);:}
                            | IF OPEN_BRACKETS expr:cond CLOSE_BRACKETS statement:body_if ELSE statement:body_else {:RESULT = new IfStatement(cond, body_if, body_else);:}
                            | WHILE OPEN_BRACKETS expr:cond CLOSE_BRACKETS statement:body {:RESULT = new WhileStatement(cond, body);:}
                            | IDENTIFIER:assignee EQUAL expr:assigner SEMICOLON {:RESULT = new AssignStatement(assignee, assigner);:}
                            | IDENTIFIER:assignee OPEN_SQUARE_BRACKETS expr:idx CLOSE_SQUARE_BRACKETS EQUAL expr:assigner SEMICOLON {:RESULT = new AssignArrayStatement(assignee, idx, assigner);:}
                            | OPEN_CURLY_BRACKETS statements_list:sl CLOSE_CURLY_BRACKETS  {:RESULT = new BlockStatement(sl);:}
                            ;

/********************/
/* EXPRESSIONS      */
/********************/
expr                    ::= NUMBER:x {:RESULT = new IntegerLiteralExpr(x);:} 
                            | IDENTIFIER:id {:RESULT = new IdentifierExpr(id);:} 
                            | TRUE {:RESULT = new TrueExpr();:} 
                            | FALSE {:RESULT = new FalseExpr();:} 
                            | THIS  {:RESULT = new ThisExpr();:} 

                            | expr:e1 PLUS expr:e2             {:RESULT = new AddExpr(e1, e2);:}
                            | expr:e1 MINUS expr:e2            {:RESULT = new SubtractExpr(e1, e2);:}
                            | expr:e1 MULT expr:e2             {:RESULT = new MultExpr(e1, e2);:}
                            | expr:e1 AND expr:e2              {:RESULT = new AndExpr(e1, e2);:}
                            | expr:e1 LT expr:e2               {:RESULT = new LtExpr(e1, e2);:}

                            | NOT expr:e  {:RESULT = new NotExpr(e);:}
                            | OPEN_BRACKETS expr:e CLOSE_BRACKETS {:RESULT = e;:}

                            | NEW IDENTIFIER:cn OPEN_BRACKETS CLOSE_BRACKETS {:RESULT = new NewObjectExpr(cn);:}
                            | NEW INT OPEN_SQUARE_BRACKETS expr:size CLOSE_SQUARE_BRACKETS {:RESULT = new NewIntArrayExpr(size);:}
                            | expr:e DOT LENGTH  {:RESULT = new ArrayLengthExpr(e);:}
                            | expr:arr OPEN_SQUARE_BRACKETS expr:idx CLOSE_SQUARE_BRACKETS {:RESULT = new ArrayAccessExpr(arr, idx);:}
                            | expr:owner DOT IDENTIFIER:method OPEN_BRACKETS expr_list:inputs CLOSE_BRACKETS {:RESULT = new MethodCallExpr(owner, method, inputs);:}
                            ;
/****************************/
/* TYPES + FORMAL ARGUMENTS */
/****************************/
type                    ::= INT {:RESULT = new IntAstType();:} 
                            | BOOLEAN {:RESULT = new BoolAstType();:} 
                            | IDENTIFIER:cn {:RESULT = new RefType(cn);:} 
                            | INT OPEN_SQUARE_BRACKETS CLOSE_SQUARE_BRACKETS {:RESULT = new IntArrayAstType();:}
                        ;

formal_arg              ::= type:t IDENTIFIER:arg_name   {:RESULT = new FormalArg(t, arg_name, lexer.getLine());:}   //TODO: remove getLine
                        ;
