/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
        //System.err.print("Syntax error at line " + lexer.getLine() + ", at position " + lexer.getCharPos() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         //System.err.print("Syntax error at line: " + lexer.getLine() + ", at position " + lexer.getCharPos() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal        CLASS;
terminal        EXTENDS;
terminal        PUBLIC;
terminal        STATIC;
terminal        VOID;
terminal        MAIN_METHOD;
terminal        RETURN;

terminal        SYSOUT;
terminal        IF;
terminal        ELSE;
terminal        WHILE;

terminal        INT_TYPE;
terminal        BOOL_TYPE;
terminal        STRING_ARRAY_TYPE;
terminal        INT_ARRAY_TYPE;

terminal        NEW;
terminal        NEW_ARRAY;
terminal        ARRAY_LEN;
terminal        METHOD_CALL;
terminal        LT;
terminal        NOT;
terminal        AND;
terminal        ADD;
terminal        SUB;
terminal        MULT;
terminal        ASSIGN;

terminal        COMMA;
terminal        LPAREN;
terminal        RPAREN;
terminal        LBRACKET;
terminal        RBRACKET;
terminal        LCURLY;
terminal        RCURLY;
terminal        SEMICOLON;

terminal String ID;
terminal        THIS;
terminal int    NUMBER;
terminal        TRUE;
terminal        FALSE;

/*****************/
/* NON TERMINALS */
/*****************/

non terminal    Program                 prog;
non terminal    LinkedList<ClassDecl>   classList;

non terminal    MainClass               mainCls;

non terminal    String                  extClass;
non terminal    LinkedList<MethodDecl>  methods;
non terminal    ClassDecl               classDecl;

non terminal    FormalArg               formal;
non terminal    LinkedList<FormalArg>   moreFormals;
non terminal    LinkedList<FormalArg>   formalsList;
non terminal    VarDecl                 varDecl;
non terminal    LinkedList<VarDecl>     varsList;
non terminal    MethodDecl              methodDecl;

non terminal    Statement               stmt;
non terminal    LinkedList<Statement>   stmtList;

non terminal    Expr                    expr;

non terminal    LinkedList<Expr>        actuals;
non terminal    LinkedList<Expr>        moreActuals;

non terminal    AstType                 type;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

precedence right    ASSIGN;
precedence left     AND;
precedence left     LT;
precedence left     ADD, SUB;
precedence left     MULT;
precedence right    NEW, NEW_ARRAY;
precedence right    NOT;
precedence left     LBRACKET, LPAREN, LCURLY, METHOD_CALL, ARRAY_LEN;


/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/******************************************/
/*            PRODUCTION RULES            */
/******************************************/

/*******************/
/* Parsing Program */
/*******************/

prog        ::=   mainCls:main classList:cl  {: RESULT = new Program(main, cl); :}
;

classList   ::=   classList:cl classDecl:cls    {: cl.addLast(cls);
                                                   RESULT = cl;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<ClassDecl>(); :}
;

/**********************/
/* Parsing Main Class */
/**********************/

mainCls     ::=   CLASS ID:name LCURLY
                  PUBLIC STATIC VOID MAIN_METHOD
                  LPAREN STRING_ARRAY_TYPE ID:argsName RPAREN
                  LCURLY stmt:mainStatement RCURLY
                  RCURLY
                    {: RESULT = new MainClass(name, argsName, mainStatement); :}
;

/*******************************/
/* Parsing Class Declarations */
/*******************************/

extClass     ::=   EXTENDS ID:superName         {: RESULT = superName; :}
                | /* empty */                   {: RESULT = null; :}
;

methods    ::=   methods:ml methodDecl:method   {: ml.addLast(method);
                                                   RESULT = ml;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<MethodDecl>(); :}
;

classDecl   ::=   CLASS ID:name extClass:superName LCURLY
                  varsList:fields
                  methods:ml
                  RCURLY
                    {: RESULT = new ClassDecl(name, superName, fields, ml); :}
;

/*******************************/
/* Parsing Method Declarations */
/*******************************/

type        ::=   INT_TYPE          {: RESULT = new IntAstType(); :}
                | BOOL_TYPE         {: RESULT = new BoolAstType(); :}
                | INT_ARRAY_TYPE    {: RESULT = new IntArrayAstType(); :}
                | ID:classId        {: RESULT = new RefType(classId); :}
;

formal      ::=   type:type ID:name             {: RESULT = new FormalArg(type, name, lexer.getLine()); :}
;

moreFormals ::=   COMMA formal:f moreFormals:fl {: fl.addFirst(f);
                                                   RESULT = fl;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<FormalArg>(); :}
;

formalsList ::=   formal:f moreFormals:fl       {: fl.addFirst(f);
                                                   RESULT = fl;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<FormalArg>(); :}
;

varDecl     ::=   type:type ID:name SEMICOLON   {: RESULT = new VarDecl(type, name, lexer.getLine()); :}
;

varsList    ::=   varsList:vl varDecl:var       {: vl.addLast(var);
                                                   RESULT = vl;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<VarDecl>(); :}
;

methodDecl  ::=   PUBLIC type:rType ID:name LPAREN formalsList:fl RPAREN LCURLY
                  varsList:vl
                  stmtList:body
                  RETURN expr:ret SEMICOLON
                  RCURLY
                    {: RESULT = new MethodDecl(rType, name, fl, vl, body, ret, lexer.getLine()); :}
;

/**********************/
/* Parsing Statements */
/**********************/

stmtList        ::=   stmt:s stmtList:sl            {: sl.addFirst(s);
                                                       RESULT = sl;
                                                    :}
                    | /* empty */                   {: RESULT = new LinkedList<Statement>(); :}
;

stmt            ::=   LCURLY stmtList:sl RCURLY     {: RESULT = new BlockStatement(sl); :}

                    | IF LPAREN expr:cond RPAREN stmt:ifCase ELSE stmt:elseCase
                        {: RESULT = new IfStatement(cond, ifCase, elseCase); :}

                    | WHILE LPAREN expr:cond RPAREN stmt:body
                        {: RESULT = new WhileStatement(cond, body); :}

                    | SYSOUT LPAREN expr:arg RPAREN SEMICOLON
                        {: RESULT = new SysoutStatement(arg); :}

                    | ID:lv ASSIGN expr:rv SEMICOLON
                        {: RESULT = new AssignStatement(lv, rv); :}

                    | ID:lv LBRACKET expr:index RBRACKET ASSIGN expr:rv SEMICOLON
                        {: RESULT = new AssignArrayStatement(lv, index, rv); :}
;

/***********************/
/* Parsing Expressions */
/***********************/

moreActuals ::=   COMMA expr:e moreActuals:el   {: el.addFirst(e);
                                                   RESULT = el;
                                                :}
                | /* empty */                   {: RESULT = new LinkedList<Expr>(); :}
;

actuals     ::=   expr:e moreActuals:el {: el.addFirst(e);
                                           RESULT = el;
                                        :}
                | /* empty */           {: RESULT = new LinkedList<Expr>(); :}
;

expr        ::=   TRUE              {: RESULT = new TrueExpr(); :}
                | FALSE             {: RESULT = new FalseExpr(); :}
                | NUMBER:num        {: RESULT = new IntegerLiteralExpr(num); :}
                | ID:id             {: RESULT = new IdentifierExpr(id); :}
                | THIS              {: RESULT = new ThisExpr(); :}

                | NEW ID:classId LPAREN RPAREN
                    {: RESULT = new NewObjectExpr(classId); :}

                | NEW_ARRAY LBRACKET expr:lengthExpr RBRACKET
                    {: RESULT = new NewIntArrayExpr(lengthExpr); :}

                | expr:arrayExpr ARRAY_LEN
                    {: RESULT = new ArrayLengthExpr(arrayExpr); :}

                | expr:ownerExpr METHOD_CALL ID:methodId LPAREN actuals:el RPAREN
                    {: RESULT = new MethodCallExpr(ownerExpr, methodId, el); :}

                | expr:arrayExpr LBRACKET expr:indexExpr RBRACKET
                    {: RESULT = new ArrayAccessExpr(arrayExpr, indexExpr); :}

                | LPAREN expr:e RPAREN  {: RESULT = e; :}
                | NOT expr:e            {: RESULT = new NotExpr(e); :}
                | expr:e1 LT expr:e2    {: RESULT = new LtExpr(e1, e2); :}
                | expr:e1 AND expr:e2   {: RESULT = new AndExpr(e1, e2); :}
                | expr:e1 MULT expr:e2  {: RESULT = new MultExpr(e1, e2); :}
                | expr:e1 ADD expr:e2   {: RESULT = new AddExpr(e1, e2); :}
                | expr:e1 SUB expr:e2   {: RESULT = new SubtractExpr(e1, e2); :}
;